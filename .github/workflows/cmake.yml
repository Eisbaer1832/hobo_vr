name: CMake

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build config'
        required: true
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release

jobs:
  env-setup:
    runs-on: ubuntu-latest
    outputs:
      build: ${{steps.yeet.outputs.config}}

    steps:
      - name: Env setup
        run: echo "BUILD_TYPE=${{inputs.buildType}}" >> $GITHUB_ENV
        if: ${{contains(inputs.buildType, 'e')}}

      - name: Env setup - default
        run: echo "BUILD_TYPE=Release" >> $GITHUB_ENV
        if: ${{!contains(inputs.buildType, 'e')}}

      - name: Yeet outputs
        id: yeet
        run: echo "::set-output name=config::${{env.BUILD_TYPE}}"

      - name: Check outputs
        run: echo "BUILD_TYPE = |${{ steps.yeet.outputs.config }}|"

  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    needs: [env-setup]

    steps:
    - name: Clone repo
      uses: actions/checkout@v2
      
    - name: Clone submodules
      run: git submodule init && git submodule update

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake driver -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{needs.env-setup.outputs.build}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{needs.env-setup.outputs.build}}
      
    - name: Install
      # Install the built driver into it's directory
      run: cmake --install ${{github.workspace}}/build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: hobovr-build-${{matrix.os}}
        path: |
          hobovr
